require('dotenv').config();
const { Client } = require('pg');
const fs = require('fs');
const path = require('path');

const {
  DATABASE_NAME,
  DATABASE_USER,
  DATABASE_PASSWORD,
  DATABASE_HOST,
  DATABASE_PORT,
} = process.env;

// Connexion √† la base postgres pour supprimer/cr√©er la base "livret"
const adminClient = new Client({
  user: DATABASE_USER,
  host: DATABASE_HOST,
  password: DATABASE_PASSWORD,
  port: DATABASE_PORT,
  database: 'postgres', // base temporaire pour manipuler la vraie
});

async function resetDatabase() {
  try {
    await adminClient.connect();

    // üõë Terminer toutes les connexions √† la base
    console.log(`üõë Fermeture des connexions actives sur la base ${DATABASE_NAME}...`);
    await adminClient.query(`
      SELECT pg_terminate_backend(pg_stat_activity.pid)
      FROM pg_stat_activity
      WHERE pg_stat_activity.datname = '${DATABASE_NAME}'
        AND pid <> pg_backend_pid();
    `);

    // üî¥ Drop + Create
    console.log(`üî¥ Suppression de la base ${DATABASE_NAME}...`);
    await adminClient.query(`DROP DATABASE IF EXISTS ${DATABASE_NAME}`);

    console.log(`‚úÖ Cr√©ation de la base ${DATABASE_NAME}...`);
    await adminClient.query(`CREATE DATABASE ${DATABASE_NAME}`);
    await adminClient.end();

    // Connexion √† la nouvelle base pour ex√©cuter le fichier SQL
    const appClient = new Client({
      user: DATABASE_USER,
      host: DATABASE_HOST,
      password: DATABASE_PASSWORD,
      port: DATABASE_PORT,
      database: DATABASE_NAME,
    });

    await appClient.connect();
    console.log(`üìÑ Ex√©cution du script ./config/bdd-livret.sql...`);

    const sql = fs.readFileSync(path.join(__dirname, '../config/bdd-livret.sql')).toString();
    await appClient.query(sql);

    await appClient.end();
    console.log(`üéâ Base ${DATABASE_NAME} recr√©√©e avec succ√®s !`);
  } catch (err) {
    console.error('‚ùå Erreur lors du reset de la base :', err);
  }
}

resetDatabase();
